{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Memory.js","src/RedBlackTree.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","extend","Y","Transaction","_Y$Transaction","store","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","ss","os","ds","_inherits","Store","utils","RBTree","BufferedStore","createSmallLookupBuffer","Database","_Y$AbstractDatabase","y","opts","_this2","_createClass","key","value","self","requestTransaction","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","console","log","connector","userId","t0","delegateYield","getStateSet","t2","t1","logTable","gc1","gc2","warn","JSON","stringify","listenersById","listenersByIdExecuteNow","transactionInProgress","stop","makeGen","gen","res","done","getNextRequest","destroy","_context2","_get","prototype","AbstractDatabase","N","val","color","_left","_right","_parent","id","tree","parent","newParent","right","newRight","left","root","p","newLeft","get","set","findNext","findWithLowerBound","abrupt","findPrev","findWithUpperBound","from","smaller","to","_context3","findNodeWithLowerBound","_context4","findNodeWithUpperBound","iterate","_context5","findSmallestNode","compareIds","filter","_context7","o_","_context6","_typeof","push","table","find","_context8","findNode","constructor","Array","_delete","d","isFakeChild","child","_context9","blacken","isBlack","isRed","_fixDelete","node","sibling","redden","rotateLeft","rotateRight","put","v","_context10","_fixInsert","uncle","getUncle","grandparent","flush","_context11"],"mappings":"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","file":"y-memory.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  require('./RedBlackTree.js')(Y)\n  class Transaction extends Y.Transaction {\n    constructor (store) {\n      super(store)\n      this.store = store\n      this.ss = store.ss\n      this.os = store.os\n      this.ds = store.ds\n    }\n  }\n  var Store = Y.utils.RBTree\n  var BufferedStore = Y.utils.createSmallLookupBuffer(Store)\n\n  class Database extends Y.AbstractDatabase {\n    constructor (y, opts) {\n      super(y, opts)\n      this.os = new BufferedStore()\n      this.ds = new Store()\n      this.ss = new BufferedStore()\n    }\n    logTable () {\n      var self = this\n      self.requestTransaction(function * () {\n        console.log('User: ', this.store.y.connector.userId, \"==============================\") // eslint-disable-line\n        console.log(\"State Set (SS):\", yield* this.getStateSet()) // eslint-disable-line\n        console.log(\"Operation Store (OS):\") // eslint-disable-line\n        yield* this.os.logTable() // eslint-disable-line\n        console.log(\"Deletion Store (DS):\") //eslint-disable-line\n        yield* this.ds.logTable() // eslint-disable-line\n        if (this.store.gc1.length > 0 || this.store.gc2.length > 0) {\n          console.warn('GC1|2 not empty!', this.store.gc1, this.store.gc2)\n        }\n        if (JSON.stringify(this.store.listenersById) !== '{}') {\n          console.warn('listenersById not empty!')\n        }\n        if (JSON.stringify(this.store.listenersByIdExecuteNow) !== '[]') {\n          console.warn('listenersByIdExecuteNow not empty!')\n        }\n        if (this.store.transactionInProgress) {\n          console.warn('Transaction still in progress!')\n        }\n      }, true)\n    }\n    transact (makeGen) {\n      var t = new Transaction(this)\n      while (makeGen !== null) {\n        var gen = makeGen.call(t)\n        var res = gen.next()\n        while (!res.done) {\n          res = gen.next(res.value)\n        }\n        makeGen = this.getNextRequest()\n      }\n    }\n    * destroy () {\n      yield* super.destroy()\n      delete this.os\n      delete this.ss\n      delete this.ds\n    }\n  }\n  Y.extend('memory', Database)\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n","'use strict'\n\n/*\n  This file contains a not so fancy implemantion of a Red Black Tree.\n*/\nmodule.exports = function (Y) {\n  class N {\n    // A created node is always red!\n    constructor (val) {\n      this.val = val\n      this.color = true\n      this._left = null\n      this._right = null\n      this._parent = null\n      if (val.id === null) {\n        throw new Error('You must define id!')\n      }\n    }\n    isRed () { return this.color }\n    isBlack () { return !this.color }\n    redden () { this.color = true; return this }\n    blacken () { this.color = false; return this }\n    get grandparent () {\n      return this.parent.parent\n    }\n    get parent () {\n      return this._parent\n    }\n    get sibling () {\n      return (this === this.parent.left)\n        ? this.parent.right : this.parent.left\n    }\n    get left () {\n      return this._left\n    }\n    get right () {\n      return this._right\n    }\n    set left (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._left = n\n    }\n    set right (n) {\n      if (n !== null) {\n        n._parent = this\n      }\n      this._right = n\n    }\n    rotateLeft (tree) {\n      var parent = this.parent\n      var newParent = this.right\n      var newRight = this.right.left\n      newParent.left = this\n      this.right = newRight\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    next () {\n      if (this.right !== null) {\n        // search the most left node in the right tree\n        var o = this.right\n        while (o.left !== null) {\n          o = o.left\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.left) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    prev () {\n      if (this.left !== null) {\n        // search the most right node in the left tree\n        var o = this.left\n        while (o.right !== null) {\n          o = o.right\n        }\n        return o\n      } else {\n        var p = this\n        while (p.parent !== null && p !== p.parent.right) {\n          p = p.parent\n        }\n        return p.parent\n      }\n    }\n    rotateRight (tree) {\n      var parent = this.parent\n      var newParent = this.left\n      var newLeft = this.left.right\n      newParent.right = this\n      this.left = newLeft\n      if (parent === null) {\n        tree.root = newParent\n        newParent._parent = null\n      } else if (parent.left === this) {\n        parent.left = newParent\n      } else if (parent.right === this) {\n        parent.right = newParent\n      } else {\n        throw new Error('The elements are wrongly connected!')\n      }\n    }\n    getUncle () {\n      // we can assume that grandparent exists when this is called!\n      if (this.parent === this.parent.parent.left) {\n        return this.parent.parent.right\n      } else {\n        return this.parent.parent.left\n      }\n    }\n  }\n\n  class RBTree {\n    constructor () {\n      this.root = null\n      this.length = 0\n    }\n    * findNext (id) {\n      return yield* this.findWithLowerBound([id[0], id[1] + 1])\n    }\n    * findPrev (id) {\n      return yield* this.findWithUpperBound([id[0], id[1] - 1])\n    }\n    findNodeWithLowerBound (from) {\n      if (from === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((from === null || Y.utils.smaller(from, o.val.id)) && o.left !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.left\n          } else if (from !== null && Y.utils.smaller(o.val.id, from)) {\n            // o is not within the bound, maybe one of the right elements is..\n            if (o.right !== null) {\n              o = o.right\n            } else {\n              // there is no right element. Search for the next bigger element,\n              // this should be within the bounds\n              return o.next()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findNodeWithUpperBound (to) {\n      if (to === void 0) {\n        throw new Error('You must define from!')\n      }\n      var o = this.root\n      if (o === null) {\n        return null\n      } else {\n        while (true) {\n          if ((to === null || Y.utils.smaller(o.val.id, to)) && o.right !== null) {\n            // o is included in the bound\n            // try to find an element that is closer to the bound\n            o = o.right\n          } else if (to !== null && Y.utils.smaller(to, o.val.id)) {\n            // o is not within the bound, maybe one of the left elements is..\n            if (o.left !== null) {\n              o = o.left\n            } else {\n              // there is no left element. Search for the prev smaller element,\n              // this should be within the bounds\n              return o.prev()\n            }\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    findSmallestNode () {\n      var o = this.root\n      while (o != null && o.left != null) {\n        o = o.left\n      }\n      return o\n    }\n    * findWithLowerBound (from) {\n      var n = this.findNodeWithLowerBound(from)\n      return n == null ? null : n.val\n    }\n    * findWithUpperBound (to) {\n      var n = this.findNodeWithUpperBound(to)\n      return n == null ? null : n.val\n    }\n    * iterate (t, from, to, f) {\n      var o\n      if (from === null) {\n        o = this.findSmallestNode()\n      } else {\n        o = this.findNodeWithLowerBound(from)\n      }\n      while (o !== null && (to === null || Y.utils.smaller(o.val.id, to) || Y.utils.compareIds(o.val.id, to))) {\n        yield* f.call(t, o.val)\n        o = o.next()\n      }\n      return true\n    }\n    * logTable (from, to, filter) {\n      if (filter == null) {\n        filter = function () {\n          return true\n        }\n      }\n      if (from == null) { from = null }\n      if (to == null) { to = null }\n      var os = []\n      yield* this.iterate(this, from, to, function * (o) {\n        if (filter(o)) {\n          var o_ = {}\n          for (var key in o) {\n            if (typeof o[key] === 'object') {\n              o_[key] = JSON.stringify(o[key])\n            } else {\n              o_[key] = o[key]\n            }\n          }\n          os.push(o_)\n        }\n      })\n      if (console.table != null) {\n        console.table(os)\n      }\n    }\n    * find (id) {\n      var n\n      return (n = this.findNode(id)) ? n.val : null\n    }\n    findNode (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('Expect id to be an array!')\n      }\n      var o = this.root\n      if (o === null) {\n        return false\n      } else {\n        while (true) {\n          if (o === null) {\n            return false\n          }\n          if (Y.utils.smaller(id, o.val.id)) {\n            o = o.left\n          } else if (Y.utils.smaller(o.val.id, id)) {\n            o = o.right\n          } else {\n            return o\n          }\n        }\n      }\n    }\n    * delete (id) {\n      if (id == null || id.constructor !== Array) {\n        throw new Error('id is expected to be an Array!')\n      }\n      var d = this.findNode(id)\n      if (d == null) {\n        // throw new Error('Element does not exist!')\n        return\n      }\n      this.length--\n      if (d.left !== null && d.right !== null) {\n        // switch d with the greates element in the left subtree.\n        // o should have at most one child.\n        var o = d.left\n        // find\n        while (o.right !== null) {\n          o = o.right\n        }\n        // switch\n        d.val = o.val\n        d = o\n      }\n      // d has at most one child\n      // let n be the node that replaces d\n      var isFakeChild\n      var child = d.left || d.right\n      if (child === null) {\n        isFakeChild = true\n        child = new N({id: 0})\n        child.blacken()\n        d.right = child\n      } else {\n        isFakeChild = false\n      }\n\n      if (d.parent === null) {\n        if (!isFakeChild) {\n          this.root = child\n          child.blacken()\n          child._parent = null\n        } else {\n          this.root = null\n        }\n        return\n      } else if (d.parent.left === d) {\n        d.parent.left = child\n      } else if (d.parent.right === d) {\n        d.parent.right = child\n      } else {\n        throw new Error('Impossible!')\n      }\n      if (d.isBlack()) {\n        if (child.isRed()) {\n          child.blacken()\n        } else {\n          this._fixDelete(child)\n        }\n      }\n      this.root.blacken()\n      if (isFakeChild) {\n        if (child.parent.left === child) {\n          child.parent.left = null\n        } else if (child.parent.right === child) {\n          child.parent.right = null\n        } else {\n          throw new Error('Impossible #3')\n        }\n      }\n    }\n    _fixDelete (n) {\n      function isBlack (node) {\n        return node !== null ? node.isBlack() : true\n      }\n      function isRed (node) {\n        return node !== null ? node.isRed() : false\n      }\n      if (n.parent === null) {\n        // this can only be called after the first iteration of fixDelete.\n        return\n      }\n      // d was already replaced by the child\n      // d is not the root\n      // d and child are black\n      var sibling = n.sibling\n      if (isRed(sibling)) {\n        // make sibling the grandfather\n        n.parent.redden()\n        sibling.blacken()\n        if (n === n.parent.left) {\n          n.parent.rotateLeft(this)\n        } else if (n === n.parent.right) {\n          n.parent.rotateRight(this)\n        } else {\n          throw new Error('Impossible #2')\n        }\n        sibling = n.sibling\n      }\n      // parent, sibling, and children of n are black\n      if (n.parent.isBlack() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        this._fixDelete(n.parent)\n      } else if (n.parent.isRed() &&\n        sibling.isBlack() &&\n        isBlack(sibling.left) &&\n        isBlack(sibling.right)\n      ) {\n        sibling.redden()\n        n.parent.blacken()\n      } else {\n        if (n === n.parent.left &&\n          sibling.isBlack() &&\n          isRed(sibling.left) &&\n          isBlack(sibling.right)\n        ) {\n          sibling.redden()\n          sibling.left.blacken()\n          sibling.rotateRight(this)\n          sibling = n.sibling\n        } else if (n === n.parent.right &&\n          sibling.isBlack() &&\n          isRed(sibling.right) &&\n          isBlack(sibling.left)\n        ) {\n          sibling.redden()\n          sibling.right.blacken()\n          sibling.rotateLeft(this)\n          sibling = n.sibling\n        }\n        sibling.color = n.parent.color\n        n.parent.blacken()\n        if (n === n.parent.left) {\n          sibling.right.blacken()\n          n.parent.rotateLeft(this)\n        } else {\n          sibling.left.blacken()\n          n.parent.rotateRight(this)\n        }\n      }\n    }\n    * put (v) {\n      if (v == null || v.id == null || v.id.constructor !== Array) {\n        throw new Error('v is expected to have an id property which is an Array!')\n      }\n      var node = new N(v)\n      if (this.root !== null) {\n        var p = this.root // p abbrev. parent\n        while (true) {\n          if (Y.utils.smaller(node.val.id, p.val.id)) {\n            if (p.left === null) {\n              p.left = node\n              break\n            } else {\n              p = p.left\n            }\n          } else if (Y.utils.smaller(p.val.id, node.val.id)) {\n            if (p.right === null) {\n              p.right = node\n              break\n            } else {\n              p = p.right\n            }\n          } else {\n            p.val = node.val\n            return p\n          }\n        }\n        this._fixInsert(node)\n      } else {\n        this.root = node\n      }\n      this.length++\n      this.root.blacken()\n      return node\n    }\n    _fixInsert (n) {\n      if (n.parent === null) {\n        n.blacken()\n        return\n      } else if (n.parent.isBlack()) {\n        return\n      }\n      var uncle = n.getUncle()\n      if (uncle !== null && uncle.isRed()) {\n        // Note: parent: red, uncle: red\n        n.parent.blacken()\n        uncle.blacken()\n        n.grandparent.redden()\n        this._fixInsert(n.grandparent)\n      } else {\n        // Note: parent: red, uncle: black or null\n        // Now we transform the tree in such a way that\n        // either of these holds:\n        //   1) grandparent.left.isRed\n        //     and grandparent.left.left.isRed\n        //   2) grandparent.right.isRed\n        //     and grandparent.right.right.isRed\n        if (n === n.parent.right && n.parent === n.grandparent.left) {\n          n.parent.rotateLeft(this)\n          // Since we rotated and want to use the previous\n          // cases, we need to set n in such a way that\n          // n.parent.isRed again\n          n = n.left\n        } else if (n === n.parent.left && n.parent === n.grandparent.right) {\n          n.parent.rotateRight(this)\n          // see above\n          n = n.right\n        }\n        // Case 1) or 2) hold from here on.\n        // Now traverse grandparent, make parent a black node\n        // on the highest level which holds two red nodes.\n        n.parent.blacken()\n        n.grandparent.redden()\n        if (n === n.parent.left) {\n          // Case 1\n          n.grandparent.rotateRight(this)\n        } else {\n          // Case 2\n          n.grandparent.rotateLeft(this)\n        }\n      }\n    }\n    * flush () {}\n  }\n\n  Y.utils.RBTree = RBTree\n}\n"],"sourceRoot":"/source/"}